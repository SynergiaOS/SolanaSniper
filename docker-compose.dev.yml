version: '3.8'

services:
  # Neo4j for Graphiti Knowledge Graph
  neo4j:
    image: neo4j:5.26-community
    container_name: sniperbot-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/sniperbot123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - sniperbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "sniperbot123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # DragonflyDB - Ultra-fast Redis-compatible cache
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.15.1
    container_name: sniperbot-dragonfly
    ports:
      - "6379:6379"
    command: >
      --logtostderr
      --cache_mode=true
      --maxmemory=2gb
      --proactor_threads=2
    volumes:
      - dragonfly_data:/data
    networks:
      - sniperbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL for persistent data (optional - for comparison)
  postgres:
    image: postgres:16-alpine
    container_name: sniperbot-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sniperbot
      - POSTGRES_USER=sniperbot
      - POSTGRES_PASSWORD=sniperbot123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sniperbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sniperbot -d sniperbot"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: sniperbot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sniperbot123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sniperbot-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: sniperbot-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sniperbot-network
    restart: unless-stopped

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  dragonfly_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  sniperbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
